from datetime import datetime, date, time, timedelta
from gi.overrides.keysyms import diaeresis
from _locale import DAY_1


    
class Tarifa:
    """Clase Servicio calculara informacion 
    de la inforamcion dada"""
    def __init__(self, inicioDeServicio, finDeServicio):
        print("inicio" + inicioDeServicio +" Fin "+ finDeServicio)
        self.inicio = inicioDeServicio
        self.final = finDeServicio
        self.tarifaFinDeSemana = 100
        self.tarifaDiaDeSemana = 200
    def tiempoDeTrabajo(self, inicioDeServicio, finDeServicio):
        """ Inicio de servicio"""
        dayStart= inicioDeServicio.day
        monthStart= inicioDeServicio.month
        yearStart= inicionDeServicio.year
        hourStart= inicioDeServicio.hour
        minuteStart= inicioDeServicio.minute
        """ Fin de servicio"""
        dayEnd= finDeServicio.day
        monthEnd= finDeServicio.month
        yearEnd= finDeServicio.year
        hourEnd= finDeServicio.hour
        minuteEnd= finDeServicio.minute
        #15 minutos es aqui 
        #por un minito si se pasa aqui 
        """Si el dia inicial es menor que el dia final estando en el mismo mes y ano"""
        if (dayEnd<dayStart and monthEnd==monthStart and yearEnd==yearStart) or (dayEnd==dayStart and monthEnd==monthStart and yearEnd==yearStart and hourEnd<hourStart):
            print("Error en los datos")
            return 0
        """Si el dia de servicio supera mas de siete dias"""
        if dayEnd-dayStart>7 or monthEnd!=monthStart or yearEnd!=yearStart:
            print("El maximo de dias para el servicio ha superado el limite")
            return 0
        """ Ha utilizado menos de 15 minutos del servicio""" 
        if minuteEnd-minuteStart<15 and hourEnd==hourStart and dayEnd==dayStart and monthEnd==monthStart:
            print("Ha tardado menos de 15 minutos")
            return 0
        if dayEnd==dayStart and hourEnd<hourStart:
            print("Error ")
            
        
            
        horasAPagar =6 
        return horasAPagar
    def calcularPrecio(self, tarifa, tiempoDeServicio):
        """"Tarifa es un arreglo en donde se guarda las tasas de cobranza"""
        """Tiempo de servicio es otro arreglo donde la primera posicion indica si es dia de semana """
        self.tasaDiaDeSemana=tarifa[0]
        self.tasaFinDeSemana=tarifa[1]
        self.horasCobrar= tiempoDeServicio

ahora = datetime.now() 
hora_actual = time(ahora.hour, ahora.minute, ahora.second)
mas_5m = ahora + timedelta(seconds=300)
mas_5m = time(mas_5m.hour, mas_5m.minute, mas_5m.second)
racion_de_5h = timedelta(hours=5)
mas_5h = ahora + racion_de_5h

  